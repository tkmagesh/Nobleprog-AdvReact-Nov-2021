Schedule:
    Session - 1     : 1:30 Hrs
    Tea Break - 1   : 0:20 mins
    Session - 2     : 1:30 Hrs
    Lunch Break     : 1:00 Hr
    Session - 3     : 1:30 Hrs
    Tea Break - 2   : 0:20 mins
    Session - 4     : 1:30 Hrs

Methodology:
    No powerpoints
    100% hands on

About You:
    Name
    Primary Skillset
    Experience in React (Mandatory)
    Experience in Redux (if any)


Topics
Day-1
    Redux
    Hooks
Day-2
    React & Redux in TypeScript
    Authentication
    Testing
    Performance Optimization


Redux?
    Library for managing state in React
    Why do we need it?


State
    UI State
        Any data that supports the "presentational (ui)"  needs of the application
        It is highly UNLIKELY that this data (state) is needed in other parts of the application
        Feel free to use React.useState() to manage the UI state in the component itself

    App State
        Any data that supports the "core logic (domain)" of the application
        It is highly LIKELY that this data (state) is needed in other parts of the application
        DO NOT maintain this data in the component 

Choices of managing App State
    1. Redux
    2. Mobx
    3. Context API
    4. Reflux


Class A & Class B
Class A depends on Class B (existential dependency)

Solve the "bank account" problem using redux

To install yarn
    npm install yarn -g

To create a react application
    yarn create react-app bug-tracker-app

To start the application
    cd bug-tracker-app
    yarn start


src
    bugs
        actions
        reducers
        store
        components
        index.js
    store
        index.js

Smart Components / Container Components
    Receive the data and actions from redux and then pass them to the Presentational Components
    Using useDispatch, useSelector are permitted
    DONOT have any user interaction functionality
    It is advisable to have fewer Smart Components
    ex., Bugs component

Dumb Components / Presentational Components
    Receive the data and actions from the Smart Components and then render them
    DONOT use useDispatch, useSelector etc
    Have user interaction functionality
    It is advisable to have more Presentational Components
    ex., BugStats, BugEdit, BugItem, BugSort, & BugList components


Middleware
    Encapsulate any logic that is common across 'actions'

To run the json-server
    cd data-server
    npx json-server db.json -p 3030

To install axios
    yarn add axios
    

TypeScript
    superset of javascript
    TypeScript = typesafe javascript
    Type verification happens ONLY during the compilation time (not at runtime)

    ts => ts compiler => js

To create a react application in typescript
    npx create-react-app <app-name> --template typescript
